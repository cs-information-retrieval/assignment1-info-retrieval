/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inforetrieval_part1;

import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.util.List;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author ToddNguyen
 */
public class MainFrame extends javax.swing.JFrame {
    
    // Declare some variables that will be used
    
    // Variable for the file chosen
    File file;
    String[] csvInfo;
    
    // End of variable declaration
    //****************************************************************
    
    
    // Getters and setters
    public File getFile() {return this.file;};
    public void setFile(File file) {this.file = file;}
    
    public String[] getCsvInfo() {return this.csvInfo;}
    public void setCsvInfo(String[] csvInfo) {this.csvInfo = csvInfo;}
    
    // End of Getters declaration
    //****************************************************************
    
    

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fileChooser = new javax.swing.JFileChooser();
        fileLabel = new javax.swing.JLabel();
        fileChooserButton = new javax.swing.JButton();
        seedLabel = new javax.swing.JLabel();
        seedTextField = new javax.swing.JTextField();
        maxPagesLabel = new javax.swing.JLabel();
        maxPagesTextField = new javax.swing.JTextField();
        domainRestrictionLabel = new javax.swing.JLabel();
        domainRestrictionTextField = new javax.swing.JTextField();

        fileChooser.setDialogTitle("Open Dialog");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        fileLabel.setText("Choose CSV File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        getContentPane().add(fileLabel, gridBagConstraints);

        fileChooserButton.setText("Browse");
        fileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(fileChooserButton, gridBagConstraints);

        seedLabel.setText("Seed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        getContentPane().add(seedLabel, gridBagConstraints);

        seedTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(seedTextField, gridBagConstraints);

        maxPagesLabel.setText("Max Pages");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        getContentPane().add(maxPagesLabel, gridBagConstraints);

        maxPagesTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(maxPagesTextField, gridBagConstraints);

        domainRestrictionLabel.setText("Domain Restriction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        getContentPane().add(domainRestrictionLabel, gridBagConstraints);

        domainRestrictionTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(domainRestrictionTextField, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserButtonActionPerformed
        // Set the file chooser to the current directory
        File currentDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(currentDirectory);
        // Open the file chooser
        int returnVal = fileChooser.showOpenDialog(this);
        
        // If the user selects "OK"
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Check if the file ends with ".csv"
            File selectedFile = fileChooser.getSelectedFile();
            // If the file does not end with csv
            if (selectedFile.getName().endsWith(".csv") == false) {
                JOptionPane.showMessageDialog(this, "Please select a .csv file");
            }
            else {
                // Set this class's file to the selected file
                this.setFile(fileChooser.getSelectedFile());
                this.readFileContents();
            }
        }
        else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_fileChooserButtonActionPerformed

    
    /**
     * Read the file contents of the selected csv file
     */
    private void readFileContents() {
        // Check if the file is not null
        if (this.getFile() == null) {
            System.out.println("No file selected yet.");
        }
        else {
            Path path = Paths.get(this.getFile().getPath());
            try {
                // Read the file contents
                List<String> fileContents = Files.readAllLines(path);
                
                // If there is more than one line
                if (fileContents.size() > 1) {
                    JOptionPane.showMessageDialog(this, "CSV file should only have one line");
                }
                else {
                    String[] splits = fileContents.get(0).split(",");
                    this.setCsvInfo(splits);
                    
                    String seed = splits[0];
                    int maxPages = Integer.parseInt(splits[1]);
                    String domainRestriction = splits[2];
                    
                    seedTextField.setText(seed);
                    maxPagesTextField.setText(String.valueOf(maxPages));
                    domainRestrictionTextField.setText(domainRestriction);
                    
                    Controller.getInstance().execute(this.getCsvInfo());
                }
                
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Try to set look and feel
                try {
                    UIManager.setLookAndFeel(
                        UIManager.getCrossPlatformLookAndFeelClassName()
                    );
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
                
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel domainRestrictionLabel;
    private javax.swing.JTextField domainRestrictionTextField;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton fileChooserButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JLabel maxPagesLabel;
    private javax.swing.JTextField maxPagesTextField;
    private javax.swing.JLabel seedLabel;
    private javax.swing.JTextField seedTextField;
    // End of variables declaration//GEN-END:variables

}
