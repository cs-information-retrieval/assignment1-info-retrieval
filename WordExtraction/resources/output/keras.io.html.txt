scikit-learn
api
utils
contributing
&nbsp;
keras
documentation
keras:
the
python
deep
learning
library
you
have
just
found
keras.
keras
is
a
high-level
neural
networks
api,
written
in
python
and
capable
of
running
on
top
of
tensorflow
,
cntk
,
or
theano
.
it
was
developed
with
a
focus
on
enabling
fast
experimentation.
being
able
to
go
from
idea
to
result
with
the
least
possible
delay
is
key
to
doing
good
research.
use
keras
if
you
need
a
deep
learning
library
that:
allows
for
easy
and
fast
prototyping
(through
user
friendliness,
modularity,
and
extensibility).
supports
both
convolutional
networks
and
recurrent
networks,
as
well
as
combinations
of
the
two.
runs
seamlessly
on
cpu
and
gpu.
read
the
documentation
at
keras.io
.
keras
is
compatible
with:
python
2.7-3.6
.
guiding
principles
user
friendliness.
keras
is
an
api
designed
for
human
beings,
not
machines.
it
puts
user
experience
front
and
center.
keras
follows
best
practices
for
reducing
cognitive
load:
it
offers
consistent
&amp;
simple
apis,
it
minimizes
the
number
of
user
actions
required
for
common
use
cases,
and
it
provides
clear
and
actionable
feedback
upon
user
error.
modularity.
a
model
is
understood
as
a
sequence
or
a
graph
of
standalone,
fully-configurable
modules
that
can
be
plugged
together
with
as
few
restrictions
as
possible.
in
particular,
neural
layers,
cost
functions,
optimizers,
initialization
schemes,
activation
functions,
regularization
schemes
are
all
standalone
modules
that
you
can
combine
to
create
new
models.
easy
extensibility.
new
modules
are
simple
to
add
(as
new
classes
and
functions),
and
existing
modules
provide
ample
examples.
to
be
able
to
easily
create
new
modules
allows
for
total
expressiveness,
making
keras
suitable
for
advanced
research.
work
with
python
.
no
separate
models
configuration
files
in
a
declarative
format.
models
are
described
in
python
code,
which
is
compact,
easier
to
debug,
and
allows
for
ease
of
extensibility.
getting
started:
30
seconds
to
keras
the
core
data
structure
of
keras
is
a
model
,
a
way
to
organize
layers.
the
simplest
type
of
model
is
the
sequential
model,
a
linear
stack
of
layers.
for
more
complex
architectures,
you
should
use
the
keras
functional
api
,
which
allows
to
build
arbitrary
graphs
of
layers.
here
is
the
sequential
model:
from
keras.models
import
sequentialmodel
=
sequential()
stacking
layers
is
as
easy
as
.add()
:
from
keras.layers
import
densemodel.add(dense(units=64,
activation='relu',
input_dim=100))model.add(dense(units=10,
activation='softmax'))
once
your
model
looks
good,
configure
its
learning
process
with
.compile()
:
model.compile(loss='categorical_crossentropy',
optimizer='sgd',
metrics=['accuracy'])
if
you
need
to,
you
can
further
configure
your
optimizer.
a
core
principle
of
keras
is
to
make
things
reasonably
simple,
while
allowing
the
user
to
be
fully
in
control
when
they
need
to
(the
ultimate
control
being
the
easy
extensibility
of
the
source
code).
model.compile(loss=keras.losses.categorical_crossentropy,
optimizer=keras.optimizers.sgd(lr=0.01,
momentum=0.9,
nesterov=true))
you
can
now
iterate
on
your
training
data
in
batches:
#
x_train
and
y_train
are
numpy
arrays
--just
like
in
the
scikit-learn
api.model.fit(x_train,
y_train,
epochs=5,
batch_size=32)
alternatively,
you
can
feed
batches
to
your
model
manually:
model.train_on_batch(x_batch,
y_batch)
evaluate
your
performance
in
one
line:
loss_and_metrics
=
model.evaluate(x_test,
y_test,
batch_size=128)
or
generate
predictions
on
new
data:
classes
=
model.predict(x_test,
batch_size=128)
building
a
question
answering
system,
an
image
classification
model,
a
neural
turing
machine,
or
any
other
model
is
just
as
fast.
the
ideas
behind
deep
learning
are
simple,
so
why
should
their
implementation
be
painful?
for
a
more
in-depth
tutorial
about
keras,
you
can
check
out:
getting
started
with
the
sequential
model
getting
started
with
the
functional
api
in
the
examples
folder
of
the
repository,
you
will
find
more
advanced
models:
question-answering
with
memory
networks,
text
generation
with
stacked
lstms,
etc.
installation
before
installing
keras,
please
install
one
of
its
backend
engines:
tensorflow,
theano,
or
cntk.
we
recommend
the
tensorflow
backend.
tensorflow
installation
instructions
.
theano
installation
instructions
.
cntk
installation
instructions
.
